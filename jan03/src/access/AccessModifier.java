package access;
// >>접근제어자 정리<<
/*
 * 1. public	모든 접근을 허용. 패키지 막론하고 모두 열람 가능
 * 2. protected 상속받은 클래스, 또는 같은 패키지내에서만 사용 가능
 * 3. default	기본 제어자, 아무 것도 안 붙임
 * 				클래스 내부와 같은 패키지 내에서 접근 가능
 * 4. private	클래스 외부에서 접근 불가, 같은 클래스 내 가능
 * 
 * >>객체지향 프로그래밍의 특징<<
 * 1. 캡슐화	
 * 		객체의 필드, 메소드를 하나로 묶고 실제 구현 내용을 감추는 것.
 * 		외부 객체는 객체 내부의 구조를 알지 못하며 객체가 노출해서 제공하는 
 * 		필드와 메소드만 이용할 수 있음.
 * 
 * 2. 상속(책 p.190)
 * 		일반적으로 상속은 부모가 가지고 있는 재산을 자식에게 물려주는 것 .
 * 		자식은 특별한 노력 없이 부모가 물려준 재산을 가지게 됨.
 * 		OOP에서도 부모 역할의 상위 객체와 자식 역할의 하위 객체가 있음
 * 		자기가 가지고 있는 필드와 메소드를 하위 객체에게 물려주어
 * 		하위 객체가 사용할 수 있도록 해주는 기술입니다.			
 * 		자바의 최상위 클래스는 Object입니다.
 * 		
 * 3. 다형성
 * 		같은 타입이지만 실행결과가 다양한 객체를 이용 할 수 있는 성질
 * 		자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용함.
 * 		부모타입에는 모든 자식 객체가 대입될 수 있고 
 * 		인터페이스 타입에는 모든 구현 객체가 대입될 수 있습니다.
 * 		
 * 
 */
public class AccessModifier {

}
